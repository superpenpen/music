<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.music.mapper.RoleMapper">
    <!--获取角色相关信息-->
    <resultMap id="roleMap" type="com.music.util.model.One2Many">
        <id column="roleId" property="roleId"/>
        <result column="roleName" property="roleName"/>
        <result column="descInfo" property="descInfo"/>
        <result column="createUserId" property="createUserId"/>
        <result column="createTime" property="createTime"/>
        <result column="updateTime" property="updateTime"/>
        <collection property="users" ofType="com.alibaba.fastjson.JSONObject">
            <id column="userId" property="userId"/>
            <result column="userName" property="userName"/>
        </collection>
        <collection property="menus" ofType="com.music.util.model.One2Many">
            <id column="menuCode" property="menuCode"/>
            <result column="menuName" property="menuName"/>
            <collection property="permissions" ofType="com.alibaba.fastjson.JSONObject">
                <id column="permissionId" property="permissionId"/>
                <result column="permissionName" property="permissionName"/>
            </collection>
        </collection>
    </resultMap>

    <select id="getAllRoles" resultMap="roleMap">
        SELECT
            r.id              roleId,
            r.role_name       roleName,
            r.desc_info       descInfo,
            r.create_user_id  createUserId,
            r.create_time     createTime,
            r.update_time     updateTime,
            u.id              userId,
            u.username        userName,
            p.id              permissionId,
            p.menu_code       menuCode,
            p.menu_name       menuName,
            p.permission_name permissionName
        FROM
            (SELECT *
             FROM `role`
             LIMIT #{start}, #{limit}) r
            LEFT JOIN `user` u ON r.id = u.role_id
            LEFT JOIN `role_permission` rp ON r.id = rp.role_id
            LEFT JOIN `permission` p ON rp.permission_id = p.id AND rp.STATUS = 1
        WHERE
            r.id != 1
        ORDER BY
            r.id,
            p.id
    </select>

    <select id="getRolesById" resultMap="roleMap">
        SELECT
            r.id              roleId,
            r.role_name       roleName,
            r.desc_info       descInfo,
            r.create_user_id  createUserId,
            r.create_time     createTime,
            r.update_time     updateTime,
            u.id              userId,
            u.username        userName,
            p.id              permissionId,
            p.menu_code       menuCode,
            p.menu_name       menuName,
            p.permission_name permissionName
        FROM
            (SELECT *
             FROM `role`
             WHERE create_user_id = #{userId}
             LIMIT #{start}, #{limit}) r
            LEFT JOIN `user` u ON r.id = u.role_id
            LEFT JOIN `role_permission` rp ON r.id = rp.role_id
            LEFT JOIN `permission` p ON rp.permission_id = p.id AND rp.status = 1
        ORDER BY
            r.id,
            p.id
    </select>

    <!--获取菜单和权限信息-->
    <resultMap id="permissionMap" type="com.music.util.model.One2Many">
        <id column="menuName" property="menuName"/>
        <collection property="permissions" ofType="com.alibaba.fastjson.JSONObject">
            <id column="id" property="id"/>
            <result column="permissionName" property="permissionName"/>
            <result column="requiredPermission" property="requiredPermission"/>
        </collection>
    </resultMap>
    <select id="getAllPermission" resultMap="permissionMap">
        SELECT
            p.id                  id,
            p.menu_name           menuName,
            p.permission_name     permissionName,
            p.required_permission requiredPermission
        FROM
            `permission` p;
    </select>

    <!--新建role_permission记录-->
    <insert id="insertRolePermission">
        INSERT INTO role_permission (role_id, permission_id, `status`)
        VALUES
        <foreach collection="permissions" item="item" index="index" separator=",">
            (#{roleId}, #{item}, #{status})
        </foreach>
    </insert>

    <!--修改role_permission记录-->
    <update id="updateRolePermission">
        UPDATE role_permission
        SET
        `status`=#{status}
        WHERE role_id = #{roleId}
        AND permission_id in (
        <foreach collection="permissions" item="item" index="index" separator=",">
            #{item}
        </foreach>
        )
    </update>

</mapper>